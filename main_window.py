# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from Widget_Layout.widget_layout_setup import Widget_Layout_Setup
from Widget_Layout.widget_camera import Ui_Camera
from Widget_Layout.widget_vehicle_info_base import Ui_Vehicle_Info
from Widget_Layout.widget_search import Ui_Search
import sqlite3
import cv2


class Ui_MainWindow(QtWidgets.QMainWindow):

    def __init__(self):
        super().__init__()
        self.setupUi()
        self.wg_camera_items = []

        # widget
        self.widget_layout_setup = Widget_Layout_Setup()
        self.ui_search = Ui_Search()
        # grid
        self.setup_grid()

        # signals
        self.signal_connect()

        # database
        self.conn = sqlite3.connect('Database/atin.db', check_same_thread=False)
        self.c = self.conn.cursor()

        # add widget to scroll area
        self.list_vehicle_widget = []
        self.count_add_to_widget = 0
        for i in range(8):
            vehicle_widget = Ui_Vehicle_Info()
            self.list_vehicle_widget.append(vehicle_widget)
            self.scrollAreaWidgetContents.layout().addWidget(vehicle_widget)

        # count
        self.count_motor = 0
        self.count_car = 0

    def slot_count_motor(self, count):
        self.count_motor += 1
        self.qlabel_vehicle_count_bike.setText(str(self.count_motor))

    def slot_count_car(self, count):
        self.count_car += 1
        self.qlabel_vehicle_count_car.setText(str(self.count_car))

    def slot_vehicle_info(self, vehicle_info):
        # if self.count_add_to_widget < 8:
        widget = self.list_vehicle_widget[self.count_add_to_widget % 8]
        widget = self.add_info_to_widget(widget, vehicle_info)
        self.count_add_to_widget += 1

    def add_info_to_widget(self, widget, vehicle_info):
        print(vehicle_info)
        color = vehicle_info['color']
        brand = vehicle_info['brand']
        plate = vehicle_info['plate']
        id = vehicle_info['id']
        speed = vehicle_info['speed']
        crop = vehicle_info['crop']
        date_time = vehicle_info['date_time']
        # plate_color = vehicle_info['plate_color']
        widget.qlabel_color.setText(color)
        widget.qlabel_brand.setText(brand)
        widget.qlabel_plate.setText(plate)
        widget.qlabel_speed.setText(speed)
        # widget.qlabel_plate_color.setText(plate_color)
        widget.qlabel_time.setText(date_time)
        if crop is not None:
            crop = cv2.resize(crop, (200, 200))
            cv2.imwrite("Crop/{}.jpg".format(id), crop)
            crop = cv2.cvtColor(crop, cv2.COLOR_BGR2RGB)
            qt_img = QtGui.QPixmap.fromImage(
                QtGui.QImage(crop.data, crop.shape[1], crop.shape[0], QtGui.QImage.Format_RGB888)).scaled(
                widget.qlabel_icon_car.width(), widget.qlabel_icon_car.height())
            widget.qlabel_icon_car.setPixmap(qt_img)
            widget.qlabel_icon_car.setScaledContents(True)
        self.c.execute("delete from information where plate = ?", (plate,))
        command = f"insert into information values({id}, '{plate}', '{color}', '{brand}', '{speed}', '{date_time}')"
        self.c.execute(command)
        self.conn.commit()
        return widget

    def signal_connect(self):
        # signal
        self.widget_layout_setup.sig_apply_layout.connect(self.slot_apply_layout)

        # button
        self.btn_setup_layout.clicked.connect(self.slot_show_camera_layout)
        self.btn_start_app.clicked.connect(self.slot_start_app)
        self.btn_stop_app.clicked.connect(self.slot_stop_app)
        self.btn_search.clicked.connect(self.slot_search)

    def setup_grid(self):
        self.grid_layout_cameras = QtWidgets.QGridLayout()
        self.grid_layout_cameras.setContentsMargins(0, 0, 0, 0)
        self.frame_cameras.setLayout(self.grid_layout_cameras)

    def slot_show_camera_layout(self):
        self.widget_layout_setup.hide()
        self.widget_layout_setup.show()

    def slot_apply_layout(self, rows, cols):
        dictionary = self.get_setup_layout_in_db()
        self.slot_add_widget(rows, cols, dictionary)

    def slot_add_widget(self, rows, cols, dictionary):
        self.destroy_all_cameras()
        count = 0
        for i in range(rows):  # rows
            for j in range(cols):  # cols
                count += 1
                if str(count) in dictionary.keys():
                    setup_dict = dictionary[str(count)]
                else:
                    setup_dict = {}
                self.grid_layout_cameras.addWidget(self.create_camera(count, setup_dict), i, j)

    def destroy_all_cameras(self):
        for widget in self.wg_camera_items:
            self.grid_layout_cameras.removeWidget(widget)
            widget.hide()
        self.wg_camera_items.clear()

    def create_camera(self, camera_id, setup_dict):
        camera = Ui_Camera()
        self.wg_camera_items.append(camera)
        if setup_dict:
            rtsp = setup_dict['rtsp']
            features = setup_dict['features']
            display = True if str(setup_dict['display']) == "1" else False
            camera.txt_rtsp.setText(rtsp)
            camera.combo_features.setCurrentText(features)
            camera.cb_display.setChecked(True)
        camera.txt_camera_id.setText(str(camera_id))
        return camera

    def get_setup_layout_in_db(self):
        command = "SELECT * FROM setup_layout"
        dictionary = {}
        self.c.execute(command)
        datas = self.c.fetchall()
        for data in datas:
            id, rtsp, features, display = data
            dictionary[id] = {'rtsp': rtsp, 'features': features, 'display': display}
        return dictionary

    def slot_start_app(self):
        for idx, widget in enumerate(self.wg_camera_items):
            id = widget.txt_camera_id.text()
            rtsp = widget.txt_rtsp.text()
            features = widget.combo_features.currentText()
            display = 1 if widget.cb_display.isChecked() else 0
            self.c.execute("DELETE FROM setup_layout WHERE camera_id = ?", (id,))
            self.c.execute("INSERT INTO setup_layout VALUES (?, ?, ?, ?)", (id, rtsp, features, display))
            self.widget_start(widget, id, rtsp)
        self.conn.commit()

    def slot_stop_app(self):
        print(len(self.wg_camera_items))
        for widget in self.wg_camera_items:
            widget.stop_all_thread()

    def slot_search(self):
        self.ui_search.db = r"Database/atin.db"
        self.ui_search.db_to_df()
        self.ui_search.show_table()
        self.ui_search.show()

    def widget_start(self, widget, id, rtsp):
        widget.setup(id, rtsp)
        widget.create_thread()
        widget.thread_show.sig_info_vehicle.connect(self.slot_vehicle_info)
        widget.thread_counting.sig_count_motor.connect(self.slot_count_motor)
        widget.thread_counting.sig_count_car.connect(self.slot_count_car)
        widget.start_all_thread()

    def setupUi(self):
        self.setObjectName("Main Window")
        # self.resize(1382, 904)
        self.setWindowState(QtCore.Qt.WindowMaximized)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setStyleSheet("background-color: rgb(0, 85, 127);")
        self.centralwidget.setObjectName("centralwidget")
        self.layout_main = QtWidgets.QGridLayout(self.centralwidget)
        self.layout_main.setObjectName("layout_main")
        self.menu = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.menu.sizePolicy().hasHeightForWidth())
        self.menu.setSizePolicy(sizePolicy)
        self.menu.setMinimumSize(QtCore.QSize(300, 0))
        self.menu.setStyleSheet("")
        self.menu.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.menu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.menu.setObjectName("menu")
        self.gridLayout = QtWidgets.QGridLayout(self.menu)
        self.gridLayout.setObjectName("gridLayout")
        self.groupBox = QtWidgets.QGroupBox(self.menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setStyleSheet("QGroupBox{\n"
                                    "    background-color: rgb(170, 170, 0);\n"
                                    "    border: none;\n"
                                    "    border-radius: 10px\n"
                                    "}")
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.qlabel_vehicle_count_bike = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.qlabel_vehicle_count_bike.sizePolicy().hasHeightForWidth())
        self.qlabel_vehicle_count_bike.setSizePolicy(sizePolicy)
        self.qlabel_vehicle_count_bike.setMinimumSize(QtCore.QSize(100, 100))
        font = QtGui.QFont()
        font.setPointSize(48)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.qlabel_vehicle_count_bike.setFont(font)
        self.qlabel_vehicle_count_bike.setStyleSheet("background-color: rgb(0, 0, 45);\n"
                                                     "color: white;")
        self.qlabel_vehicle_count_bike.setAlignment(QtCore.Qt.AlignCenter)
        self.qlabel_vehicle_count_bike.setObjectName("qlabel_vehicle_count_bike")
        self.gridLayout_2.addWidget(self.qlabel_vehicle_count_bike, 1, 1, 1, 1)
        self.qlabel_count_bike = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.qlabel_count_bike.sizePolicy().hasHeightForWidth())
        self.qlabel_count_bike.setSizePolicy(sizePolicy)
        self.qlabel_count_bike.setMinimumSize(QtCore.QSize(100, 100))
        self.qlabel_count_bike.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.qlabel_count_bike.setFont(font)
        self.qlabel_count_bike.setStyleSheet("background-color: rgb(170, 170, 170)")
        self.qlabel_count_bike.setLineWidth(0)
        self.qlabel_count_bike.setText("")
        self.qlabel_count_bike.setAlignment(QtCore.Qt.AlignCenter)
        self.qlabel_count_bike.setObjectName("qlabel_count_bike")
        self.gridLayout_2.addWidget(self.qlabel_count_bike, 1, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        self.gridLayout_2.addItem(spacerItem, 0, 0, 1, 1)
        self.qlabel_vehicle_count_car = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.qlabel_vehicle_count_car.sizePolicy().hasHeightForWidth())
        self.qlabel_vehicle_count_car.setSizePolicy(sizePolicy)
        self.qlabel_vehicle_count_car.setMinimumSize(QtCore.QSize(0, 100))
        font = QtGui.QFont()
        font.setPointSize(48)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.qlabel_vehicle_count_car.setFont(font)
        self.qlabel_vehicle_count_car.setStyleSheet("background-color: rgb(0, 0, 45);\n"
                                                    "color: white;")
        self.qlabel_vehicle_count_car.setAlignment(QtCore.Qt.AlignCenter)
        self.qlabel_vehicle_count_car.setObjectName("qlabel_vehicle_count_car")
        self.gridLayout_2.addWidget(self.qlabel_vehicle_count_car, 3, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        self.gridLayout_2.addItem(spacerItem1, 2, 0, 1, 1)
        self.qlabel_count_car = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.qlabel_count_car.sizePolicy().hasHeightForWidth())
        self.qlabel_count_car.setSizePolicy(sizePolicy)
        self.qlabel_count_car.setMinimumSize(QtCore.QSize(100, 100))
        self.qlabel_count_car.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.qlabel_count_car.setFont(font)
        self.qlabel_count_car.setStyleSheet("background-color: rgb(170, 170, 170)")
        self.qlabel_count_car.setText("")
        self.qlabel_count_car.setAlignment(QtCore.Qt.AlignCenter)
        self.qlabel_count_car.setObjectName("qlabel_count_car")
        self.gridLayout_2.addWidget(self.qlabel_count_car, 3, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        self.gridLayout_2.addItem(spacerItem2, 4, 0, 1, 1)
        self.gridLayout.addWidget(self.groupBox, 8, 0, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 30, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        self.gridLayout.addItem(spacerItem3, 1, 0, 1, 1)
        self.btn_search = QtWidgets.QPushButton(self.menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_search.sizePolicy().hasHeightForWidth())
        self.btn_search.setSizePolicy(sizePolicy)
        self.btn_search.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_search.setStyleSheet("QPushButton{\n"
                                      "    background-color: rgb(170, 170, 0);\n"
                                      "    border: none;\n"
                                      "    border-radius: 10px\n"
                                      "}\n"
                                      "QPushButton:hover{\n"
                                      "    background-color: rgb(109, 109, 0);\n"
                                      "    border: none;\n"
                                      "    border-radius: 10px\n"
                                      "}")
        self.btn_search.setObjectName("btn_search")
        self.gridLayout.addWidget(self.btn_search, 5, 0, 1, 1)
        self.btn_start_app = QtWidgets.QPushButton(self.menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_start_app.sizePolicy().hasHeightForWidth())
        self.btn_start_app.setSizePolicy(sizePolicy)
        self.btn_start_app.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_start_app.setStyleSheet("QPushButton{\n"
                                         "    background-color: rgb(170, 170, 0);\n"
                                         "    border: none;\n"
                                         "    border-radius: 10px\n"
                                         "}\n"
                                         "QPushButton:hover{\n"
                                         "    background-color: rgb(109, 109, 0);\n"
                                         "    border: none;\n"
                                         "    border-radius: 10px\n"
                                         "}")
        self.btn_start_app.setObjectName("btn_start_app")
        self.gridLayout.addWidget(self.btn_start_app, 3, 0, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(20, 30, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        self.gridLayout.addItem(spacerItem4, 6, 0, 1, 1)
        self.qlabel_logo_atin = QtWidgets.QLabel(self.menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.qlabel_logo_atin.sizePolicy().hasHeightForWidth())
        self.qlabel_logo_atin.setSizePolicy(sizePolicy)
        self.qlabel_logo_atin.setMinimumSize(QtCore.QSize(0, 120))
        self.qlabel_logo_atin.setMaximumSize(QtCore.QSize(16777215, 120))
        self.qlabel_logo_atin.setStyleSheet("background: gray\n"
                                            "")
        self.qlabel_logo_atin.setText("")
        self.qlabel_logo_atin.setObjectName("qlabel_logo_atin")
        self.gridLayout.addWidget(self.qlabel_logo_atin, 0, 0, 1, 1)
        self.btn_setup_layout = QtWidgets.QPushButton(self.menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_setup_layout.sizePolicy().hasHeightForWidth())
        self.btn_setup_layout.setSizePolicy(sizePolicy)
        self.btn_setup_layout.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_setup_layout.setBaseSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.btn_setup_layout.setFont(font)
        self.btn_setup_layout.setMouseTracking(False)
        self.btn_setup_layout.setStyleSheet("QPushButton{\n"
                                            "    background-color: rgb(170, 170, 0);\n"
                                            "    border: none;\n"
                                            "    border-radius: 10px\n"
                                            "}\n"
                                            "QPushButton:hover{\n"
                                            "    background-color: rgb(109, 109, 0);\n"
                                            "    border: none;\n"
                                            "    border-radius: 10px\n"
                                            "}")
        self.btn_setup_layout.setInputMethodHints(QtCore.Qt.ImhNone)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../Project-1/icon/setup_layout.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_setup_layout.setIcon(icon)
        self.btn_setup_layout.setIconSize(QtCore.QSize(25, 25))
        self.btn_setup_layout.setDefault(False)
        self.btn_setup_layout.setFlat(False)
        self.btn_setup_layout.setObjectName("btn_setup_layout")
        self.gridLayout.addWidget(self.btn_setup_layout, 2, 0, 1, 1)
        self.btn_stop_app = QtWidgets.QPushButton(self.menu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.btn_stop_app.sizePolicy().hasHeightForWidth())
        self.btn_stop_app.setSizePolicy(sizePolicy)
        self.btn_stop_app.setMinimumSize(QtCore.QSize(0, 40))
        self.btn_stop_app.setStyleSheet("QPushButton{\n"
                                        "    background-color: rgb(170, 170, 0);\n"
                                        "    border: none;\n"
                                        "    border-radius: 10px\n"
                                        "}\n"
                                        "QPushButton:hover{\n"
                                        "    background-color: rgb(109, 109, 0);\n"
                                        "    border: none;\n"
                                        "    border-radius: 10px\n"
                                        "}")
        self.btn_stop_app.setObjectName("btn_stop_app")
        self.gridLayout.addWidget(self.btn_stop_app, 4, 0, 1, 1)
        self.layout_main.addWidget(self.menu, 0, 0, 1, 1)
        self.scrollArea_info = QtWidgets.QScrollArea(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea_info.sizePolicy().hasHeightForWidth())
        self.scrollArea_info.setSizePolicy(sizePolicy)
        self.scrollArea_info.setMinimumSize(QtCore.QSize(0, 250))
        self.scrollArea_info.setStyleSheet("background-color: rgb(0, 63, 93);")
        self.scrollArea_info.setWidgetResizable(True)
        self.scrollArea_info.setObjectName("scrollArea_info")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 887, 218))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        # self.gridLayout_3 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        # self.gridLayout_3.setObjectName("gridLayout_3")
        self.scrollArea_info.setWidget(self.scrollAreaWidgetContents)
        # self.layout_main.addWidget(self.scrollArea_info, 1, 0, 1, 3)
        self.verticalLayout = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout.setObjectName("H_Layout")
        self.layout_main.addWidget(self.scrollArea_info, 1, 0, 1, 2)
        self.frame_cameras = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_cameras.sizePolicy().hasHeightForWidth())
        self.frame_cameras.setSizePolicy(sizePolicy)
        self.frame_cameras.setStyleSheet("background-color: rgb(0, 71, 104);")
        self.frame_cameras.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_cameras.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_cameras.setObjectName("frame_cameras")
        self.layout_main.addWidget(self.frame_cameras, 0, 1, 1, 1)
        self.setCentralWidget(self.centralwidget)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btn_start_app.setText(_translate("MainWindow", "Start App"))
        self.btn_stop_app.setText(_translate("MainWindow", "Stop App"))
        self.btn_setup_layout.setText(_translate("MainWindow", "Setup Layout"))
        self.qlabel_vehicle_count_bike.setText(_translate("MainWindow", "0"))
        self.qlabel_vehicle_count_car.setText(_translate("MainWindow", "0"))
        self.btn_search.setText(_translate("MainWindow", "Search"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_MainWindow()
    ui.show()
    sys.exit(app.exec_())
